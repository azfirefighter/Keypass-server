<?php
class Friend extends CI_Controller {
	private $_os_names = array (
							7 => 'ios',
							8 => 'ipad',
							9 => 'android'
						);
						
	public function index()
	{
		exit('Nothing to do');
	}
	
	/*
	 * Fonction appelée avec en paramètre POST un tableau d'amis
	 * Retourne un joli JSON avec les infos des applis des amis
	 * retourne 25 résultats, à partir de la position index (par défaut 0)
	 * 
	 * est-ce intelligent/possible d'avoir des données en GET et d'autre en POST ?
	 */
	public function smartfan($os = -1, $device = -1, $index = 0)
	{
		if (is_numeric($index) === FALSE)
		{
			die('invalid index');
		}
				
		if ($os == -1)
		{
			die('missing os id'); // le device id n'est pas obligatoire
		}
		
		if ($os == 'android')
		{
			$os_id = 9;
		}
		else if (($os == 'ios') && ($device == 'ipad'))
		{
			$os_id = 8;
		}
		else if ($os == 'ios')
		{
			$os_id = 7;
		}
		else
		{
			die('unable to find corresponding device');
		}
		
		//$friends = json_decode($this->input->post('friends')); // Code Igniter applique automatiquement un filtre XSS
		$friends = array('1', '2'); // pour tester en prod
		
		if (sizeof($friends) == 0)
		{
			die('empty uuids array');
		}
		
		foreach ($friends as $friend)
		{
			// on test si on a bien des valeurs numériques
			// tout en gardant une tolérance pour un string vide
			((is_numeric($friend) === FALSE) && ($friend !== '')) && (die('invalid uuid')); 
		}
		
		$this->load->model('friend_model');
		$data['apps'] = $this->friend_model->get_apps($friends, $os_id, $index);
		$data['os_name'] = $os;
		
		// et ici, plaisir suprême, on peut appeler une vue
		$this->load->view('friend/json_view', $data);
	}
	
	/*
	 * Ajoute une relation entre une personne et une appli
	 */
	public function add($uuid = '', $app_id = '')
	{
		if ((is_numeric($uuid) === FALSE) || (is_numeric($app_id) === FALSE))
		{
			die('missing or not numeric id');
		}
		
		$this->load->model('friend_model');
		
		$date = date('U');
		
		$this->friend_model->add_or_update_friend($uuid, $date); // cf nom de la fonction
		
		// on vérifie si l'appli que l'on veut ajouter existe bien dans notre base
		$this->load->model('app_model');
		if ($this->app_model->exist_app_id($app_id) === TRUE)
		{
			// on créé la relation
			$this->friend_model->add_friend_app($uuid, $app_id, $date);
			
			echo $date;
		}
		else
		{
			die('app id not found');
		}
	}

	/*
	 * Supprime une relation entre une personne et une appli
	 */
	public function delete($uuid = '', $app_id = '')
	{
		if ((is_numeric($uuid) === FALSE) || (is_numeric($app_id) === FALSE))
		{
			die('missing or not numeric id');
		}
		
		$this->load->model('friend_model');
		
		$date = date('U');

		// on supprime la relation
		$success = $this->friend_model->delete_friend_app($uuid, $app_id);
		
		echo $date;
	}
	
	/*
	 * Récupérer un JSON, listes des apps qu'il a
	 */
	public function get($uuid = '', $os_id = '')
	{
		if ((is_numeric($uuid) === FALSE) || (is_numeric($os_id) === FALSE))
		{
			die('missing or not numeric id');
		}
		
		$this->load->model('friend_model');
		$this->load->model('os_model');
		$data['os_name'] = $this->os_model->get_os_name($os_id);
		$data['apps'] = $this->friend_model->get_my_apps($uuid, $os_id);
		$this->load->view('friend/json_view', $data);
	}
}

/* EOF */