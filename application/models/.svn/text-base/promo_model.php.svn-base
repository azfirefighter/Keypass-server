<?php
class Promo_model extends CI_Model {
    public function __construct()
    {
        parent::__construct();
    }
	
	public function get_promos($os_id)
	{
		 if ($os_id == 'all') {	
		 	$this->db->select('app.app_title, prm.prm_id, prm.prm_class, prm.prm_date_debut, prm.prm_date_fin')->from('admin_promo AS prm')->join('admin_app AS app', 'app.app_id = prm.prm_app_id');
		 } else {
			// Oh la jolie jointure :)
			$this->db->select('app.app_title, prm.prm_id, prm.prm_class, prm.prm_date_debut, prm.prm_date_fin')->from('admin_promo AS prm')->join('admin_app AS app', 'app.app_id = prm.prm_app_id')->where('app.app_os_id', $os_id);
		}
		$query = $this->db->get();
				
		return $query->result_array();
	}

	/*
	 * CRUD avec un item
	 */
	public function get_promo($id)
	{
		$this->db->select('app.app_title, os.os_nice_name, app.app_store_id, prm.prm_class, prm.prm_position, prm.prm_price, prm.prm_discount, prm.prm_date_debut, prm.prm_date_fin')->from('admin_promo AS prm')->join('admin_app AS app', 'app.app_id = prm.prm_app_id')->join('admin_os AS os', 'os.os_id = app.app_os_id')->where('prm.prm_id', $id);
		$query = $this->db->get();
		
		return $query->row_array();
	}
	public function add_promo($data, $store_id = '')
	{
		// Attention, il y a un petit piège : on reçoit un store_id, hors la base fonctionne avec des id propres
		// du coup on va chercher le bon
		if ($store_id !== '')
		{
			$this->db->select('app_id')->from('admin_app')->where('app_store_id', $store_id);
			$query = $this->db->get();
			
			$data['prm_app_id'] = is_numeric($query->row()->app_id)?$query->row()->app_id:set_flashdata('alert', 'Erreur dans l\'id du store');
		}

		$this->db->insert('admin_promo', $data);
	}
	public function modify_promo($id, $data)
	{
		$this->db->where('prm_id', $id);
		$this->db->update('admin_promo', $data);
	}
	public function delete_promo($id)
	{
		$this->db->delete('admin_promo', array('prm_id' => $id)); 
	}
	
	/*
	 * Permet de vérifier s'il n'y a bien pas de promos de la même classe
	 * sur les dates passées
	 */
	public function is_class_free($class, $date_debut, $date_fin)
	{
		// oula, it's gonna be a little hairy
		// cas 1 : promo plus longue (totalement exclue)
		// 2 : promo finissant pendant notre promo
		// 3 : promo commençant pendant
		// 4 : promo plus courte (totalement inclue)
		$this->db->select('prm_id')->from('admin_promo')->where("prm_class = $class AND (
															(prm_date_debut <= '$date_debut' AND prm_date_fin >= '$date_fin') OR
															(prm_date_fin >= '$date_debut' AND prm_date_fin <= '$date_fin') OR
															(prm_date_debut >= '$date_debut' AND prm_date_debut <= '$date_fin') OR
															(prm_date_debut >= '$date_debut' AND prm_date_fin <= '$date_fin')
															)");
		if ($this->db->count_all_results() > 0)
		{
			return TRUE;
		} else {
			return FALSE;
		} 
	}
	
	/*
	 * Retourne les promos entre les dates que l'on passe
	 * (au format date MySQL, YYYY-MM-DD)
	 */
	public function get_period_promo($date_debut, $date_fin)
	{
		// oula, it's gonna be a little hairy
		// cas 1 : promo plus longue (totalement exclue)
		// 2 : promo finissant pendant notre promo
		// 3 : promo commençant pendant
		// 4 : promo plus courte (totalement inclue)
		$this->db->select('app.app_id, prm.prm_id, prm.prm_class, app.app_title, prm.prm_date_debut, prm.prm_date_fin')
					->from('admin_promo AS prm')
					->join('admin_app AS app', 'prm.prm_app_id = app.app_id')
					->where("(prm.prm_date_debut <= '$date_debut' AND prm.prm_date_fin >= '$date_fin') OR
							(prm.prm_date_fin >= '$date_debut' AND prm.prm_date_fin <= '$date_fin') OR
							(prm.prm_date_debut >= '$date_debut' AND prm.prm_date_debut <= '$date_fin') OR
							(prm.prm_date_debut >= '$date_debut' AND prm.prm_date_fin <= '$date_fin')");
		$query = $this->db->get();
		
		return $query->result_array();
	}
}
/* EOF */